{
  "meta": {
    "generator": "0.9.0",
    "format": 20,
    "date": 1605155460892
  },
  "custom": {
    "general": {
      "name": "General",
      "files": {
        "welcome": {
          "name": "Welcome",
          "type": "md",
          "content": "# Gamecord\r\n\r\nEasy to make discord games for your bot by us!\r\n\r\n# Installation\r\n\r\n```bash\r\nnpm install gamecord\r\n```\r\n\r\n[![NPM](https://nodei.co/npm/gamecord.png)](https://nodei.co/npm/gamecord/)\r\n\r\n\r\n# Features\r\n- Super easy to use ðŸ˜€\r\n\r\n# Quick Example\r\n\r\n```js\r\n// Install Gamecord\r\nconst GameCord = require('gamecord');\r\n\r\n// Create Client\r\nconst { Client } = require('discord.js');\r\nconst client = new Client();\r\n\r\n// Ready Event\r\nclient.on('ready', () => console.log('Bot is ready :D'));\r\n\r\n// Message Event\r\nclient.on('message', message => {\r\n    if(message.content == '!hangman'){\r\n\r\n        new GameCord.HangmanGame(message)\r\n        .setTitle('My Hangman')\r\n        .setColor('#7298da')\r\n        .setHint() // Only if you want a hint for your hangman!\r\n        .setTime(20000) // Default is 30 secs\r\n        .on('end', game => console.log(`${game.user.tag} ${game.win ? 'win' : 'lose'} the game!`))\r\n        .on('start', game => console.log(`${game.message.author.tag} started a hangman game with word ${game.word}!`))\r\n        .run() // Keep all your settings above and run it after all of your configuration!\r\n\r\n    }else if(message.content == '!snake'){\r\n\r\n        new GameCord.SnakeGame(message)\r\n        .setTitle('My snake')\r\n        .setColor('#7298da')\r\n        .setMaxTime(60000) // Always better to set max time because the default one is just 5s\r\n        .on('end', game => console.log(`${game.message.author.tag}'s snake game score was ${game.score}`)) // Start event also exists\r\n        .run()\r\n\r\n    }\r\n});\r\n\r\n// Login the bot\r\nclient.login(process.env.token);\r\n```\r\n\r\n# Quick Methods\r\n\r\n- `Minesweeper({ width: number, height: number })`\r\n\r\nWill return a grid of minesweeper using discord spoiler tag...\r\n\r\n```js\r\nmessage.channel.send(\r\n    new Discord.MessageEmbed()\r\n    .setTitle('My Minesweeper')\r\n    .setColor('#7298da')\r\n    .setDescription(GameCord.Minesweeper()) // By default minesweeper method takes 8x8 grid\r\n    .setTimestamp()\r\n)\r\n```\r\n\r\n# Samples\r\n![1](/images/snake.png)\r\n\r\n![2](/images/hangman.png)\r\n\r\n![3](/images/mine.png)\r\n\r\n# Authors\r\n* **[1GPEX](https://github.com/1GPEX)** - *Original Idea & Make snake,connect4 ganes*\r\n* **[Science Spot](https://github.com/Scientific-Guy)** - *Make a options & hangman,snake,minesweeper games* \r\n\r\n# Applicable Games\r\n- Hangman (Not Finish)\r\n- Snake\r\n- Minesweeper\r\n- ConnectFour\r\n- Quiz\r\n- GuessGame\r\n\r\n### [Discord](https://discord.gg/hw7XPxz) - *Join discord server for help*\r\n",
          "path": "docs/general/welcome.md"
        }
      }
    }
  },
  "classes": [
    {
      "name": "Connect4",
      "construct": {
        "name": "Connect4",
        "params": [
          {
            "name": "message",
            "type": [
              [
                "*"
              ]
            ]
          },
          {
            "name": "options",
            "type": [
              [
                "*"
              ]
            ]
          }
        ]
      },
      "methods": [
        {
          "name": "gameOver",
          "params": [
            {
              "name": "winner",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 105,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "filter",
          "params": [
            {
              "name": "reaction",
              "type": [
                [
                  "*"
                ]
              ]
            },
            {
              "name": "user",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 125,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "hasWon",
          "params": [
            {
              "name": "placedX",
              "type": [
                [
                  "*"
                ]
              ]
            },
            {
              "name": "placedY",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 176,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "winnerText",
          "params": [
            {
              "name": "winner",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 235,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "setTitle",
          "params": [
            {
              "name": "title",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 248,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "setColor",
          "params": [
            {
              "name": "color",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 257,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "setGameOverTitle",
          "params": [
            {
              "name": "title",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 266,
            "file": "ConnectFour.js",
            "path": "src"
          }
        },
        {
          "name": "on",
          "params": [
            {
              "name": "event",
              "type": [
                [
                  "*"
                ]
              ]
            },
            {
              "name": "callback",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 276,
            "file": "ConnectFour.js",
            "path": "src"
          }
        }
      ],
      "meta": {
        "line": 22,
        "file": "ConnectFour.js",
        "path": "src"
      }
    },
    {
      "name": "HangmanGame",
      "construct": {
        "name": "HangmanGame",
        "description": "Make your hangman game...",
        "params": [
          {
            "name": "message",
            "description": "Client Message",
            "type": [
              [
                [
                  "any"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "options",
            "optional": true,
            "default": "{}",
            "type": [
              [
                [
                  "object"
                ]
              ]
            ]
          }
        ]
      },
      "methods": [
        {
          "name": "run",
          "description": "Run the hangman game",
          "examples": [
            "HangmanGame.run()"
          ],
          "meta": {
            "line": 69,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "next",
          "description": "Next event",
          "params": [
            {
              "name": "m",
              "description": "Message object",
              "type": [
                [
                  [
                    "any"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 97,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "edit",
          "description": "Edits the embed",
          "meta": {
            "line": 109,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "end",
          "description": "Function to end the game",
          "examples": [
            "HangmanGame.end(true)"
          ],
          "params": [
            {
              "name": "win",
              "description": "A boolean deciding if the user has won or not",
              "type": [
                [
                  [
                    "boolean"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 128,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "setTitle",
          "description": "Set title",
          "params": [
            {
              "name": "title",
              "description": "Title to set",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 145,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "setColor",
          "description": "Set color",
          "params": [
            {
              "name": "color",
              "description": "Custom color to set",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 154,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "setTime",
          "description": "Set error time",
          "params": [
            {
              "name": "time",
              "description": "Number to set for message collector",
              "type": [
                [
                  [
                    "number"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 163,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "setGameOverTitle",
          "description": "Set game over title",
          "params": [
            {
              "name": "title",
              "description": "Title to set for game over embed",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 172,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "setWords",
          "description": "Set your own custom words to ask as quiz",
          "params": [
            {
              "name": "words",
              "description": "Words to set to quiz",
              "type": [
                [
                  [
                    "Array",
                    "<"
                  ],
                  [
                    "any",
                    ">"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 181,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "pushWords",
          "description": "Push your custom words to the existence list",
          "params": [
            {
              "name": "words",
              "description": "Words to push",
              "type": [
                [
                  [
                    "Array",
                    "<"
                  ],
                  [
                    "any",
                    ">"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 191,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "setHint",
          "description": "Will set hint settings to true",
          "meta": {
            "line": 200,
            "file": "Hangman.js",
            "path": "src"
          }
        },
        {
          "name": "on",
          "description": "Set function for the events",
          "params": [
            {
              "name": "event",
              "description": "Evebt name",
              "type": [
                [
                  [
                    "string"
                  ]
                ]
              ]
            },
            {
              "name": "callback",
              "description": "Event Function",
              "type": [
                [
                  [
                    "any"
                  ]
                ]
              ]
            }
          ],
          "meta": {
            "line": 210,
            "file": "Hangman.js",
            "path": "src"
          }
        }
      ],
      "meta": {
        "line": 24,
        "file": "Hangman.js",
        "path": "src"
      }
    },
    {
      "name": "SnakeGame",
      "construct": {
        "name": "SnakeGame",
        "description": "Snakegame gen",
        "params": [
          {
            "name": "message",
            "description": "Client Message",
            "type": [
              [
                [
                  "any"
                ]
              ]
            ]
          },
          {
            "name": "options",
            "description": "Your options",
            "type": [
              [
                [
                  "object"
                ]
              ]
            ]
          }
        ]
      },
      "methods": [
        {
          "name": "filter",
          "params": [
            {
              "name": "reaction",
              "type": [
                [
                  "*"
                ]
              ]
            },
            {
              "name": "user",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 150,
            "file": "SnakeGame.js",
            "path": "src"
          }
        },
        {
          "name": "isLocInSnake",
          "params": [
            {
              "name": "pos",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 158,
            "file": "SnakeGame.js",
            "path": "src"
          }
        },
        {
          "name": "setTitle",
          "params": [
            {
              "name": "title",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 227,
            "file": "SnakeGame.js",
            "path": "src"
          }
        },
        {
          "name": "setColor",
          "params": [
            {
              "name": "color",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 236,
            "file": "SnakeGame.js",
            "path": "src"
          }
        },
        {
          "name": "setMaxTime",
          "params": [
            {
              "name": "time",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 245,
            "file": "SnakeGame.js",
            "path": "src"
          }
        },
        {
          "name": "setGameOverTitle",
          "params": [
            {
              "name": "title",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 254,
            "file": "SnakeGame.js",
            "path": "src"
          }
        },
        {
          "name": "on",
          "params": [
            {
              "name": "event",
              "type": [
                [
                  "*"
                ]
              ]
            },
            {
              "name": "callback",
              "type": [
                [
                  "*"
                ]
              ]
            }
          ],
          "meta": {
            "line": 264,
            "file": "SnakeGame.js",
            "path": "src"
          }
        }
      ],
      "meta": {
        "line": 24,
        "file": "SnakeGame.js",
        "path": "src"
      }
    }
  ],
  "interfaces": [],
  "typedefs": [],
  "externals": []
}